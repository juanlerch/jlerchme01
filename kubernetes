#comandos de gcloud y kubectl para crear desplegar la aplicaci√≥n en un cluster de Google Kubernetes Engine
#Asume que esta creado un proyecto jlerchme02 (cambiar por el proyecto correspondiente en Google Cloud)
#se debe habilitar las api de google cloud y kubernetes en el proyecto desde cloud.google.com/console
 
gcloud config set project jlerchme02

gcloud config set compute/zone us-central1-c

gcloud builds submit --tag gcr.io/jlerchme02/jlerchcont1

gcloud beta container --project "jlerchme02" clusters create "cluster-1" --zone "us-central1-c" --no-enable-basic-auth --cluster-version "1.18.17-gke.100" --release-channel "regular" --machine-type "e2-medium" --image-type "COS" --disk-type "pd-standard" --disk-size "100" --metadata disable-legacy-endpoints=true --scopes "https://www.googleapis.com/auth/cloud-platform" --num-nodes "3" --enable-stackdriver-kubernetes --enable-ip-alias --network "projects/jlerchme02/global/networks/default" --subnetwork "projects/jlerchme02/regions/us-central1/subnetworks/default" --default-max-pods-per-node "110" --enable-autoscaling --min-nodes "0" --max-nodes "3" --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver --enable-autoupgrade --enable-autorepair --max-surge-upgrade 1 --max-unavailable-upgrade 0 --enable-shielded-nodes --node-locations "us-central1-c"


gcloud container clusters get-credentials cluster-1


kubectl run deploy01 --image=gcr.io/jlerchme02/jlerchcont1 --port=8080

kubectl expose deployment deploy01 --type="LoadBalancer" # conviene hacerlo de la consola de Google Cloud







 